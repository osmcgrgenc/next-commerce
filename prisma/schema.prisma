// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id              String        @id @default(uuid())
  name            String
  email           String        @unique
  passwordHash    String
  isActive        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime?     @updatedAt
  profileImageUrl String?
  role            String        // "USER" veya "ADMIN"
  permissions     String        // JSON string olarak saklanacak
  managedUsers    String        // JSON string olarak saklanacak
  addresses       Address[]
  orders          Order[]
  wishlist        Wishlist?
  activityLog     ActivityLog[]
}

model ActivityLog {
  id        String   @id @default(uuid())
  activity  String
  createdAt DateTime @default(now())
  details   String?
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model Address {
  id         String   @id @default(uuid())
  title      String
  street     String
  city       String
  state      String?
  postalCode String
  country    String
  isDefault  Boolean
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  orders     Order[]
}

model Order {
  id            String   @id @default(uuid())
  userId        String
  products      Product[]
  totalAmount   Float
  status        String   // "PENDING", "PROCESSING", "SHIPPED", "DELIVERED", "CANCELED"
  addressId     String
  paymentMethod String   // "CREDIT_CARD", "PAYPAL", "BANK_TRANSFER"
  transactionId String
  amountPaid    Float
  paymentStatus String   // "SUCCESS", "FAILED", "PENDING"
  paidAt        DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime? @updatedAt
  user          User     @relation(fields: [userId], references: [id])
  address       Address  @relation(fields: [addressId], references: [id])
}

model Wishlist {
  id       String    @id @default(uuid())
  products Product[]
  userId   String    @unique
  user     User      @relation(fields: [userId], references: [id])
}

model Product {
  id          String            @id @default(uuid())
  name        String
  slug        String            @unique
  price       Float
  description String?
  images      ProductImage[]
  category    Category          @relation(fields: [categoryId], references: [id])
  categoryId  String
  brand       Brand             @relation(fields: [brandId], references: [id])
  brandId     String
  stock       Int
  isActive    Boolean           @default(true)
  featured    Boolean           @default(false)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  variations  ProductVariation[]
  orders      Order[]
  wishlists   Wishlist[]
}

model ProductImage {
  id        String  @id @default(uuid())
  url       String
  alt       String
  isPrimary Boolean @default(false)
  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model ProductVariation {
  id        String            @id @default(uuid())
  name      String
  options   ProductVarOption[]
  productId String
  product   Product           @relation(fields: [productId], references: [id])
}

model ProductVarOption {
  id                String          @id @default(uuid())
  name              String
  productVariation  ProductVariation @relation(fields: [productVariationId], references: [id])
  productVariationId String
}

model Brand {
  id          String    @id @default(uuid())
  name        String
  slug        String    @unique
  logoUrl     String?
  description String?
  products    Product[]
}

model Category {
  id              String     @id @default(uuid())
  name            String
  slug            String     @unique
  parentId        String?
  parentCategory  Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  childCategories Category[] @relation("CategoryHierarchy")
  products        Product[]
}
